// Generated by CoffeeScript 1.3.3
(function() {
  var keycode_map = {
    8: "backspace",
    9: "tab",
    13: "enter",
    16: "shift",
    17: "control",
    18: "alt",
    19: "pause",
    20: "caps_lock",
    27: "escape",
    32: "space",
    33: "page_up",
    34: "page_down",
    35: "end",
    36: "home",
    37: "left",
    38: "up",
    39: "right",
    40: "down",
    48: "0",
    49: "1",
    50: "2",
    51: "3",
    52: "4",
    53: "5",
    54: "6",
    55: "7",
    56: "8",
    57: "9",
    65: "a",
    66: "b",
    67: "c",
    68: "d",
    69: "e",
    70: "f",
    71: "g",
    72: "h",
    73: "i",
    74: "j",
    75: "k",
    76: "l",
    77: "m",
    78: "n",
    79: "o",
    80: "p",
    81: "q",
    82: "r",
    83: "s",
    84: "t",
    85: "u",
    86: "v",
    87: "w",
    88: "x",
    89: "y",
    90: "z",
    91: "meta_left",
    92: "meta_right",
  	96: "accent",
    186: "semicolon",
    187: "equal_sign",
    188: "comma",
    192: "grave"
  };
  var KeyHandler = (function() {
    function KeyHandler() {
      this.keydown_bindings = {};
      this.keyup_bindings = {};
    };
    var activeKeys = {};
  
    var add_keybinding_to = function(bindings, config) {
      return _.each(_.keys(config), function(k) {
        if (!(bindings[k] != null)) {
          bindings[k] = [];
        } else {
          throw "double binding on " + k + " key which is no-beuno, knucklehead";
        }
        return bindings[k].push(config[k]);
      });
    };
  
    KeyHandler.prototype.on_keydown = function(key, cb) {
      var config;
      config = {};
      config[key] = cb;
      return add_keybinding_to(this.keydown_bindings, config);
    };
  
    KeyHandler.prototype.on_keyup = function(key, cb) {
      var config;
      config = {};
      config[key] = cb;
      return add_keybinding_to(this.keyup_bindings, config);
    };
  
    KeyHandler.prototype.on_throttled_keypress = function(key, fps, cb) {
      var is_down;
      is_down = false;
      this.on_keydown(key, _.bind(function() {
        if (!is_down) {
          is_down = true;
          return activeKeys[key] = {
            interval: 1000 / fps,
            last_tick: (new Date()).getTime(),
            cb: cb
          };
        }
      }, this));
      this.on_keyup(key, function() {
        is_down = false;
        return delete activeKeys[key];
      });
    };
  
    KeyHandler.prototype.do_throttled_process = function() {
      var now_time;
      now_time = (new Date()).getTime();
      return _.each(activeKeys, function(v, k) {
        if (now_time >= (v.last_tick + v.interval)) {
          v.last_tick = now_time;
          return v.cb();
        }
      });
    };
	return KeyHandler;
  })();

  var kb_state = {
    is_keydown: function(name) {
    }
  };
   
  var handle_key_event = function(bindings, kb, true_if_down) {
    var name;
    name = keycode_map[kb.which];
    if (!(name != null)) {
      throw "key code " + kb.which + " not in keycode_map master map";
    } else {
      if (true_if_down) {
        kb_state[name] = true;
      }
      else {
        delete kb_state[name];
      }
      
      if (bindings[name] != null) {
        return _.each(bindings[name], function(cb) {
          return cb(kb.repeat);
        });
      }
    }
  };
  
  var local_ikd = function(name) {
    return typeof(kb_state[name]) !== 'undefined';
  };
   

  var last_ch = null;
  var current_handler = null;
  var local_sh = function(ch) {
	last_ch = current_handler;
    current_handler = ch;
  };
  var local_cgk = function() {
    current_handler = null;
  };
  document.addEventListener('keydown', function(kb) {
    if(current_handler != null)							
      handle_key_event(current_handler.keydown_bindings, kb, true);
  });
  document.addEventListener('keyup', function(kb) {
    if(current_handler != null)							
      handle_key_event(current_handler.keyup_bindings, kb, false);
  });

  var global = this;
  global.sugs = global.sugs || {};
  global.sugs.kb = {
	set_global_kh: local_sh,
  clear_global_kh: local_cgk,
  is_keydown: local_ikd,
	KeyHandler: KeyHandler,
	keycode_map: keycode_map
  };
}).call(this);
