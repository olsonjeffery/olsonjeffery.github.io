// Generated by CoffeeScript 1.3.3
(function() {
   var UxManager = function() {
     var UxManager = function() {
       this.renderer = {};
       this.view_stack = [];
       this.window_resizer = null;
       this.transitioning = false;
       // get renderer
       var viewport = this.get_viewport();
       this.renderer = ss0.gfx.create_renderer({
         viewport_x: viewport.x,
         viewport_y: viewport.y
       });
     };
     UxManager.prototype.get_current_view = function() {
       var result = null;
       if (this.view_stack.length > 0) {
         result = this.view_stack[this.view_stack.length - 1];
       }
       return result;
     };
     UxManager.prototype.get_viewport = function() {
       return {
         x: window.innerWidth,
         y: window.innerHeight
       };
     };
     // starts the rendering loop, using whatever
     // is the topmost view as the current rendering
     // driver
     UxManager.prototype.start = function() {
       this.continue = true;
       var last_camera = null;
       var on_frame_cb = _.bind(
         function(frametime) {
           var curr_view = this.get_current_view();
           if (this.continue === true && curr_view !== null) {
             // request next animation frame
             requestAnimationFrame(on_frame_cb);
             // call user animation tasks
             if (this.transitioning === false) {
               var bundle = curr_view.do_render(
                 curr_view.curr_view_ctx,
                 frametime,
                 this);
               curr_view.get_kh(curr_view.curr_view_ctx, this).do_throttled_process();
               // do webgl rendering, if bundle != null
               if (typeof(bundle) !== 'undefined' &&
                   bundle !== null &&
                   curr_view.is_active()) {
                 if (bundle.camera != last_camera) {
                   if (this.window_resizer === null) {
                     this.window_resizer = THREEx.WindowResize(
                       this.renderer, bundle.camera);
                   }
                   this.window_resizer.set_camera(bundle.camera);
                 }
                 this.renderer.render(bundle.scene, bundle.camera);
               }
             }
           }
           else {
             // what do we do on continue == false? or there're no
             // active views?
             sugs.sys.exit();
             if (this.window_resizer !== null) {
               this.window_resizer.stop();
             }
             alert("app exited. reload to restart");
           }
         }, this);
       // start render loop
       return on_frame_cb(0);
     };
     UxManager.prototype.stop = function() {
       this.continue = false;
     };
     UxManager.prototype.push_view = function(new_view, destroy_current, done_cb) {
       this.transitioning = true;
       var will_destroy_current = 
         typeof(destroy_current) !== 'undefined' ?
         destroy_current
         : false;
       // teardown current, if any
       var outgoing_ctx = null;
       if (this.view_stack.length > 0) {
         var current = this.get_current_view();
         outgoing_Ctx = this.teardown_for(current, will_destroy_current);
       }
       var compl_cb = _.bind(function(view_ctx) {
         this.transitioning = false;
         if(typeof(done_cb) !== 'undefined') {
           done_cb(view_ctx);
         }
       }, this);
       this.setup_for(new_view, true, outgoing_ctx, compl_cb);
     };

     UxManager.prototype.pop_view = function(done_cb) {
       this.transitioning = true;
       var current = this.get_current_view();
       var outgoing_ctx = this.teardown_for(current, true);
       this.renderer.clear();
       var new_curr = this.get_current_view();
       if (new_curr !== null) {
         var compl_cb = _.bind(function(view_ctx) {
           this.transitioning = false;
           if(typeof(done_cb) !== 'undefined') {
             done_cb(view_ctx);
           }
         }, this);
         this.setup_for(new_curr, false, outgoing_ctx, compl_cb);
       } else {
         // exit?
         this.stop();
       }
     };

     UxManager.prototype.setup_for = function(view, is_new_view, outgoing_ctx, compl_cb) {
       if(is_new_view) {
         this.view_stack.push(view);
       }
       console.log("pushed to view stack, length: "+this.view_stack.length);
       var done_cb = _.bind(function(view_ctx) {
         view.curr_view_ctx = view_ctx;
         sugs.kb.set_global_kh(view.get_kh(view.curr_view_ctx, this));
         compl_cb(view_ctx);
       }, this);
       view.do_setup(this, outgoing_ctx === null ?
                                    undefined : outgoing_ctx,
                                    done_cb);
     };
     UxManager.prototype.teardown_for = function(view, will_destroy_current) {
       console.log("getting current view to teardown, name: "+view.name+". will destroy? "+will_destroy_current);
       sugs.kb.clear_global_kh();
       var outgoing_ctx = view.do_teardown(view.curr_view_ctx, this);
       view.curr_view_ctx = undefined;
       if (will_destroy_current) {
         this.view_stack.pop();
         console.log("popped view from stack. remaining view: "+this.view_stack.length);
       }
       return outgoing_ctx;
     };
     
     return new UxManager();
   };
   
   var UxView = function(params) {
     var UxView = function(params) {
       this.kh_cb = typeof(params.get_kh) == 'undefined' ?
         function(){}
       : params.get_kh;
       this.setup_cb = typeof(params.on_setup) == 'undefined' ?
         function(){}
       : params.on_setup;
       this.render_cb = typeof(params.on_render) == 'undefined' ?
         function(){}
       : params.on_render;
       this.teardown_cb = typeof(params.on_teardown) == 'undefined' ?
         function(){}
       : params.on_teardown;
       this.name = typeof(params.name) == 'undefined' ?
         "unknown_view_name"
         : params.name;
       this.active = true;
     };
     
     UxView.prototype.get_kh = function(view_ctx, mgr) {
       return this.kh_cb(view_ctx, mgr);  
     };
     UxView.prototype.do_setup = function(mgr, outgoing_ctx, done_cb) {
       return this.setup_cb(mgr, outgoing_ctx, done_cb);
     };
     UxView.prototype.do_render = function(view_ctx, frametime, mgr) {
       return this.render_cb(view_ctx, frametime, mgr);
     };
     UxView.prototype.do_teardown = function(view_ctx, mgr) {
       this.teardown_cb(view_ctx, mgr);
     };
     UxView.prototype.set_active = function(active) {
       this.active = active;
     };
     UxView.prototype.is_active = function() {
       return this.active;
     };

     return new UxView(params);
   };

   var UxUnwinder = function() {
     var UxUnwinder = function() {
       this.dom_elements = [];
       this.events = [];
       this.disposables = [];
     };
     UxUnwinder.prototype.register_selector = function(selector) {
       this.dom_elements.push(selector);
     };
     UxUnwinder.prototype.register_event = function(event, selector, cb) {
       $(selector).on(event, cb);
       this.events.push({
                          event: event,
                          selector: selector,
                          cb: cb
                        });
     };
     UxUnwinder.prototype.register_disposable = function(obj) {
       this.disposables.push(obj);
     };
     UxUnwinder.prototype.unwind = function() {
       // unbind events we registered
       _.each(this.events, function(ev) {
                $(ev.selector).off(ev.event, ev.cb);
              });
       var len = this.events.length;
       for(ctr=0;ctr<len;ctr++) {
         this.events.pop();
       }
       // and strip dom elements we registered
       _.each(this.dom_elements, function(el) {
                $(el).remove();
              });
       len = this.dom_elements.length;
       for(ctr=0;ctr<len;ctr++) {
         this.dom_elements.pop();
       }
       _.each(this.disposables, function(obj) {
                if (typeof(obj.dispose) != 'undefined') {
                  obj.dispose();
                } else {
                  obj.deallocate();
                }
              });
       len = this.disposables.length;
       for(ctr=0;ctr<len;ctr++) {
         this.disposables.pop();
       }
     };
     return new UxUnwinder();
   };
   
   var global = this;
   global.sugs = global.sugs || {};
   global.sugs.ux = {
     UxManager: UxManager,
     UxView: UxView,
     UxUnwinder: UxUnwinder
   };

 }).call(this);
