// Generated by CoffeeScript 1.3.3
(function() {

  var Tile = function(h) {

    function Tile(height) {
      this.height = height;
    }

    return new Tile(h);
  };
  var Map = function(w, h, c) {
    function Map(width, height, colors) {
      var grid_size, hm, i, _i;
      this.width = width;
      this.height = height;
      this.size = width * height;
      this.colors = colors;
      hm = [];
      grid_size = this.size;
      for (i = _i = 0; 0 <= grid_size ? _i < grid_size : _i > grid_size; i = 0 <= grid_size ? ++_i : --_i) {
        hm.push(1);
      }
      this.reset_with_height_map(this.size, hm);
    }

    Map.prototype.reset_with_height_map = function(size, hm) {
      var ctr, _i, _ref;
      if ((hm.length % size) !== 0) {
        throw ("Provided height map with length of " + hm.length) + (" does not modulo cleanly with size of " + size);
      }
      console.log("Map.reset_with_height_map: resetting grid to " + size);
      this.grid = [];
      this.size = size;
      for (ctr = _i = 0, _ref = hm.length; 0 <= _ref ? _i < _ref : _i > _ref; ctr = 0 <= _ref ? ++_i : --_i) {
        this.grid.push(new Tile(hm[ctr]));
      }
      console.log("After populate, grid.length: " + this.grid.length);
      return console.log("reset: is first elem in grid existant? " + (this.grid[0] !== null));
    };

    Map.prototype.get_tile = function(x, y) {
      return ss0.game.map_util.get_tile(this, x, y);
    };
    
    Map.prototype.get_tile_single_dim = function(elem) {
      return ss0.game.map_util.get_tile_single_dim(this, elem);
    };

    Map.prototype.set_tile = function(x, y, input_tile) {
      return ss0.game.map_util.set_tile(this, x, y, input_tile);
    };
    
    Map.prototype.get_colors = function() {
      return ss0.game.map_util.get_colors(this);
    };

    Map.prototype.each_tile = function(cb) {
      return ss0.game.map_util.each_tile(self, cb);
    };
    
    Map.prototype.get_tile_closest_to = function(coords, tile_size) {
      return ss0.game.map_util.get_tile_closest_to(this, coords, tile_size);
    };
    Map.prototype.get_geometry_coords_for = function(tile_coords, tile_size) {
      return ss0.game.map_util.get_geometry_coords_for(this, tile_coords, tile_size);
    };
    Map.prototype.to_data = function() {
      return {
        width:this.width,
        height:this.height,
        size:this.size,
        colors:this.colors,
        grid:this.grid
      };
    };

    return new Map(w, h, c);
  };
  // end Map definition

  sugs.namespace.set(this, 'ss0.backend.game.map', function(map){
    map.Map = Map;
  });

}).call(this);
